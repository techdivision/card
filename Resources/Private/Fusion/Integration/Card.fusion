prototype(TechDivision.Card:Integration.Card) < prototype(Neos.Neos:ContentComponent) {

    //api
    @context.baseNode = ${this.node}

    cardLayout = Neos.Fusion:Case {
        defaultCardLayout {
            condition = ${true}
            renderer = ${q(baseNode).property('cardLayout') ? q(baseNode).property('cardLayout') : ''}
        }
    }

    imageUri = Neos.Fusion:Case {
        asset {
            condition = ${q(baseNode).property('cardImage')}
            renderer = Neos.Neos:ImageUri {
                asset = ${q(baseNode).property('cardImage')}
            }
        }
    }

    targetUri = Neos.Neos:NodeUri {
        node = ${baseNode}
    }

    buttonText = ${q(baseNode).property('cardButtonText')}

    supportingText = ${q(baseNode).property('cardSupportingText')}

    supportingTextDisplayCondition = ${documentNode.context.inBackend || this.supportingText}

    linkedTitleDisplayCondition = ${!documentNode.context.inBackend && this.targetUri}

    cardTitle = Neos.Fusion:Case {
        cardTitle {
            condition = ${q(baseNode).property('cardTitle')}
            renderer = ${q(baseNode).property('cardTitle')}
            @position = 'start'
        }
        fallbackNodeTitle {
            condition = ${q(baseNode).property('title')}
            renderer = ${q(baseNode).property('title')}
            @position = 'end'
        }
    }

    secondaryText = ${q(baseNode).property('cardSecondaryText')}

    renderer = afx`
        <TechDivision.Card:Augmenter.CardLayoutAugmenter>
            <div @if.condition={props.cardLayout == ''}>
                <TechDivision.Card:Template.Card.Basic
                        imageUri={props.imageUri}
                        targetUri={props.targetUri}
                        buttonText={props.buttonText}
                        supportingText={props.supportingText}
                        supportingTextDisplayCondition={props.supportingTextDisplayCondition}
                        linkedTitleDisplayCondition={props.linkedTitleDisplayCondition}
                        cardTitle={props.cardTitle}
                        secondaryText={props.secondaryText} />
            </div>
            <div @if.condition={props.cardLayout == 'onlyTitleAndSupportingText'}>
                <TechDivision.Card:Template.Card.OnlyTitleAndSupportingText
                        targetUri={props.targetUri}
                        buttonText={props.buttonText}
                        supportingText={props.supportingText}
                        supportingTextDisplayCondition={props.supportingTextDisplayCondition}
                        linkedTitleDisplayCondition={props.linkedTitleDisplayCondition}
                        cardTitle={props.cardTitle}
                        secondaryText={props.secondaryText} />
            </div>
            <div @if.condition={props.cardLayout == 'titleAboveMedia'}>
                <TechDivision.Card:Template.Card.TitleAboveMedia
                        imageUri={props.imageUri}
                        targetUri={props.targetUri}
                        buttonText={props.buttonText}
                        supportingText={props.supportingText}
                        supportingTextDisplayCondition={props.supportingTextDisplayCondition}
                        linkedTitleDisplayCondition={props.linkedTitleDisplayCondition}
                        cardTitle={props.cardTitle}
                        secondaryText={props.secondaryText} />
            </div>
        </TechDivision.Card:Augmenter.CardLayoutAugmenter>
    `
}
